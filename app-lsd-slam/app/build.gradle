apply plugin: 'com.android.model.application'

model {
    android {
        compileSdkVersion = 23
        buildToolsVersion = '23.0.2'

        defaultConfig {
            applicationId = 'com.example.native_activity'
            minSdkVersion.apiLevel    = 21
            targetSdkVersion.apiLevel = 23
        }
        ndk {
            platformVersion = 9
            moduleName ='native-activity'

            toolchain = 'gcc'
            toolchainVersion "4.9"
            stl = 'gnustl_static'
            cppFlags.add("-frtti")
            cppFlags.add("-fexceptions")
            cppFlags.add('-std=c++0x')
            cppFlags.add('-I/home/smith/Work/app-lsd-slam/app/src/main/jni')
            cppFlags.add('-I/home/smith/Work/mobile-lsd-slam/lsd_slam_core/src')
            cppFlags.add('-I/home/smith/Work/android-ndk/android-ndk-r10d/platforms/android-8/arch-arm/usr/include')
            cppFlags.add('-I/home/smith/Work/android-ndk/android-ndk-r10d/sources/cxx-stl/gnu-libstdc++/4.9/include')
            cppFlags.add('-I/home/smith/Work/android-ndk/android-ndk-r10d/sources/cxx-stl/gnu-libstdc++/4.9/libs/armeabi-v7a/include')
            cppFlags.add('-I/home/smith/Work/android-ndk/android-ndk-r10d/sources/cxx-stl/gnu-libstdc++/4.9/include/backward')
            cppFlags.add('-I/home/smith/Work/android-ndk/OpenCV-android-sdk/sdk/native/jni/include')
            cppFlags.add('-I/home/smith/Work/mobile-lsd-slam/lsd_slam_core/thirdparty/Eigen')
            cppFlags.add('-I/home/smith/Work/android-ndk/crystax-ndk-10.3.1/sources/boost/1.59.0/include')
            cppFlags.add('-I/home/smith/Work/mobile-lsd-slam/lsd_slam_core/thirdparty/g2o')
            cppFlags.add('-I/home/smith/Work/mobile-lsd-slam/lsd_slam_core/thirdparty/Eigen')
            cppFlags.add('-I/home/smith/Work/mobile-lsd-slam/lsd_slam_core/thirdparty/Sophus')
            cppFlags.add('-I/home/smith/Work/mobile-lsd-slam/lsd_slam_core/thirdparty/SuiteSparse/CSparse/Include')
            cppFlags.add('-I/home/smith/Work/mobile-lsd-slam/lsd_slam_core/thirdparty/SuiteSparse/CHOLMOD/Include')

            ldLibs.addAll(['log', 'android', 'EGL', 'GLESv1_CM','z'])
        }
        productFlavors {

            create("armv7") {
                ndk.with {
                    abiFilters.add("armeabi-v7a")
                    File curDir = file('./')
                    curDir = file(curDir.absolutePath)
                    String libsDir = curDir.absolutePath + "/src/main/jniLibs/armeabi-v7a/"
                    //

                    ldLibs.add(libsDir + "libg2o_types_slam3d.so")
                    ldLibs.add(libsDir + "libg2o_types_sim3.so")
                    ldLibs.add(libsDir + "libg2o_types_sba.so")
                    ldLibs.add(libsDir + "libg2o_ext_csparse.so")
                    ldLibs.add(libsDir + "libg2o_csparse_extension.so")
                    ldLibs.add(libsDir + "libg2o_solver_csparse.so")
                    ldLibs.add(libsDir + "libg2o_stuff.so")
                    ldLibs.add(libsDir + "libg2o_core.so")
                    ldLibs.add(libsDir + "libopencv_calib3d.a")
                    ldLibs.add(libsDir + "libopencv_core.a")
                    ldLibs.add(libsDir + "libopencv_features2d.a")
                    ldLibs.add(libsDir + "libopencv_flann.a")
                    ldLibs.add(libsDir + "libopencv_highgui.a")
                    ldLibs.add(libsDir + "libopencv_imgcodecs.a")
                    ldLibs.add(libsDir + "libopencv_imgproc.a")
                    ldLibs.add(libsDir + "libopencv_ml.a")
                    ldLibs.add(libsDir + "libopencv_objdetect.a")
                    ldLibs.add(libsDir + "libopencv_photo.a")
                    ldLibs.add(libsDir + "libopencv_shape.a")
                    ldLibs.add(libsDir + "libopencv_stitching.a")
                    ldLibs.add(libsDir + "libopencv_superres.a")
                    ldLibs.add(libsDir + "libopencv_ts.a")
                    ldLibs.add(libsDir + "libopencv_video.a")
                    ldLibs.add(libsDir + "libopencv_videoio.a")
                    ldLibs.add(libsDir + "libopencv_videostab.a")

                    ldLibs.add(libsDir + "libopencv_java3.so")
                    ldLibs.add(libsDir + "libboost_thread.so")
                    ldLibs.add(libsDir + "libboost_date_time.so")
                    ldLibs.add(libsDir + "libboost_program_options.so")
                    ldLibs.add(libsDir + "libboost_filesystem.so")
                    ldLibs.add(libsDir + "libboost_serialization.so")

                    ldLibs.add(libsDir + "libcrystax.so")
                    ldLibs.add(libsDir + "liblsdslam.so")
                    ldLibs.add(libsDir + "libboost_system.so")
                    ldLibs.add(libsDir + "libgnustl_shared.so")
                }
            }
        }
        sources {
            main {
                jni {

                }
            }
        }
        buildTypes {
            release {
                minifyEnabled = false
                proguardFiles.add(file('proguard-rules.txt'))
            }
        }
    }
}
